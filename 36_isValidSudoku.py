# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
#
# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
#
#
# 上图是一个部分填充的有效的数独。
#
# 数独部分空格内已填入了数字，空白格用 '.' 表示。
#
# 示例 1:
#
# 输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true
# 示例 2:
#
# 输入:
# [
#   ["8","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: false
# 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
#      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
# 说明:
#
# 一个有效的数独（部分已被填充）不一定是可解的。
# 只需要根据以上规则，验证已经填入的数字是否有效即可。
# 给定数独序列只包含数字 1-9 和字符 '.' 。
# 给定数独永远是 9x9 形式的。
#
# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/valid-sudoku
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution(object):
    def isValidSudoku(self, board):

        for i in range(9):
            d = {}
            d1 = {}
            d2 = {}
            for j in range(9):
                if board[i][j] != ".":
                    if board[i][j] not in d:
                        d[board[i][j]] = 1
                    else:
                        print(i, j)
                        return False
                if board[j][i] != ".":
                    if board[j][i] not in d1:
                        d1[board[j][i]] = 1
                    else:
                        print("fuck")
                        print(board[j][i])
                        print(i, j)
                        return False
                ii, jj = i, j
                if j//3!=i%3:
                    jj = j%3+i%3*3
                    ii = j//3+3*(i//3)
                if board[ii][jj] != ".":
                    if board[ii][jj] not in d2:
                        d2[board[ii][jj]] = 1
                    else:
                        print(i, j)
                        return False
        return True

print(Solution().isValidSudoku([['5', '3', '4', '6', '7', '8', '.', '.', '.'], ['6', '.', '.', '1', '9', '5', '.', '.', '.'], ['.', '9', '8', '.', '.', '.', '.', '6', '.'], ['8', '.', '.', '.', '6', '.', '.', '.', '3'], ['4', '.', '.', '8', '.', '3', '.', '.', '1'], ['7', '.', '.', '.', '2', '.', '.', '.', '6'], ['.', '6', '.', '.', '.', '.', '2', '8', '.'], ['.', '.', '.', '4', '1', '9', '.', '.', '5'], ['.', '.', '.', '.', '8', '.', '.', '7', '9']]
))
# 0,0 0,1 0,2 0,3(1,0) 0,4(1,1) 0,5(1,2) 0,6(2,0) 0,7(2,1) 0,8(2,2)
# 1,0(0,3) 1,1(0,4) 1,2(0,5) 1,3 1,4 1,5 1,6(2,3) 1,7(2,4) 1,8(2,5)
# 2,0(0,6)                               2,6 2,7 2,8
# 3,0 3,1 3,2 3,3(4,0)